// SPDX-License-Identifier: CC-BY-NC-4.0
pragma solidity >=0.4.20;
import "./AK12Token.sol";


contract Ak12coinStake {
    address public owner;
    address  a;

    
    TRC20 public token;
    
    uint8 decimals;
    
    struct User{
        bool referred;
        address referred_by;
        uint256 total_invested_amount;
        uint256 referal_profit;
    }
    
    struct Referal_levels{
        uint256 level_1;
    }

    struct Panel_1{
        uint256 invested_amount;
        uint256 profit;
        uint256 profit_withdrawn;
        uint256 start_time;
        uint256 exp_time;
        bool time_started;
        uint256 remaining_inv_prof;
    }


    mapping(address => Panel_1) public panel_1;

    mapping(address => User) public user_info;
    mapping(address => Referal_levels) public refer_info;
    uint public totalcontractamount;



    constructor() public {
        owner = msg.sender;
        a = msg.sender;
        
        token = TRC20(0x411e1d259f32ba7223b185eab365bbeaf7344ba83c);
                        
    }

    function getContractERC20Balance() public view returns (uint256){
       return token.balanceOf(address(this));
    }

    function withdraw_tokens_admin(uint256 value) public returns(bool){
        require(msg.sender == owner, 'current user is not admin');
        token.transfer(msg.sender, value);
    }


    // -------------------- PANEL 1 -------------------------------  
    // 0.5-1% : 90 days == 62.95% profit :: 90 days 0.699/day  == 0.7

function invest_panel1(uint256 t_value) public {
        // 50,000,000 = 50 trx
        require(t_value >= 10 * (10 ** 6), 'Please Enter Amount no less than 10');
        require(t_value <= 100000 * (10 ** 6), 'Please Enter Amount no less than 10');

        
        if( panel_1[msg.sender].time_started == false){
            panel_1[msg.sender].start_time = now;
            panel_1[msg.sender].time_started = true;
            panel_1[msg.sender].exp_time = now + 90 days; //90*24*60*60  = 90 days
        }
            // // Approve to contract for taking tokens in
            // token.approve(address(this), t_value); // doesn't work external

            // transfer the tokens from user to contract
            token.transferFrom(msg.sender, address(this), t_value);

            // assign token amount to bot accout
            panel_1[msg.sender].invested_amount += t_value;
            user_info[msg.sender].total_invested_amount += t_value; 
            
            referral_system(t_value);
            
            //neg
        if(panel1_days() <= 90){ //90
            panel_1[msg.sender].profit += ((t_value*7*(90 - panel1_days()))/(1000)); // 90 - panel_days()
        }

    }

    function is_plan_completed_p1() public view returns(bool){
        if(panel_1[msg.sender].exp_time != 0){
            if(now >= panel_1[msg.sender].exp_time){
                return true;
            }
        if(now < panel_1[msg.sender].exp_time){
            return false;
            }
        }else{
            return false;
        }
    }

    function plan_completed_p1() public  returns(bool){
        if( panel_1[msg.sender].exp_time != 0){
        if(now >= panel_1[msg.sender].exp_time){
            reset_panel_1();
            return true;
        }
        if(now < panel_1[msg.sender].exp_time){
            return false;
            }
        }

    }

    function current_profit_p1() public view returns(uint256){
        uint256 local_profit ;
        if(now <= panel_1[msg.sender].exp_time){

        if( (panel1_days()%7 +1) ==  1){
                // Day_1 = 0.5 : 64
            if((((panel_1[msg.sender].profit + panel_1[msg.sender].profit_withdrawn)*(now-panel_1[msg.sender].start_time))/(90*(1 days))) > panel_1[msg.sender].profit_withdrawn){  // 45 * 1 days
                local_profit = (((panel_1[msg.sender].profit + panel_1[msg.sender].profit_withdrawn)*(now-panel_1[msg.sender].start_time))/(64*(1 days))) - panel_1[msg.sender].profit_withdrawn; // 20*24*60*60
                return local_profit;
            }else{
                return 0;
            }
        }
        if((panel1_days()%7 +1) ==  2){
                // Day_2 = 0.8 : 102
            if((((panel_1[msg.sender].profit + panel_1[msg.sender].profit_withdrawn)*(now-panel_1[msg.sender].start_time))/(90*(1 days))) > panel_1[msg.sender].profit_withdrawn){  // 45 * 1 days
                local_profit = (((panel_1[msg.sender].profit + panel_1[msg.sender].profit_withdrawn)*(now-panel_1[msg.sender].start_time))/(102*(1 days))) - panel_1[msg.sender].profit_withdrawn; // 20*24*60*60
                return local_profit;
            }else{
                return 0;
            }
        }
        if((panel1_days()%7 +1) ==  3){
                //Day_3 = 0.6 : 77
            if((((panel_1[msg.sender].profit + panel_1[msg.sender].profit_withdrawn)*(now-panel_1[msg.sender].start_time))/(90*(1 days))) > panel_1[msg.sender].profit_withdrawn){  // 45 * 1 days
                local_profit = (((panel_1[msg.sender].profit + panel_1[msg.sender].profit_withdrawn)*(now-panel_1[msg.sender].start_time))/(77*(1 days))) - panel_1[msg.sender].profit_withdrawn; // 20*24*60*60
                return local_profit;
            }else{
                return 0;
            }

        }           
        if((panel1_days()%7 +1) ==  4){
                // Day_4 = 0.7 : 90
            if((((panel_1[msg.sender].profit + panel_1[msg.sender].profit_withdrawn)*(now-panel_1[msg.sender].start_time))/(90*(1 days))) > panel_1[msg.sender].profit_withdrawn){  // 45 * 1 days
                local_profit = (((panel_1[msg.sender].profit + panel_1[msg.sender].profit_withdrawn)*(now-panel_1[msg.sender].start_time))/(90*(1 days))) - panel_1[msg.sender].profit_withdrawn; // 20*24*60*60
                return local_profit;
            }else{
                return 0;
            }
        }
        if((panel1_days()%7 +1) ==  5){
                // Day_5 = 1 : 129
            if((((panel_1[msg.sender].profit + panel_1[msg.sender].profit_withdrawn)*(now-panel_1[msg.sender].start_time))/(90*(1 days))) > panel_1[msg.sender].profit_withdrawn){  // 45 * 1 days
                local_profit = (((panel_1[msg.sender].profit + panel_1[msg.sender].profit_withdrawn)*(now-panel_1[msg.sender].start_time))/(129*(1 days))) - panel_1[msg.sender].profit_withdrawn; // 20*24*60*60
                return local_profit;
            }else{
                return 0;
            }
        }
        if((panel1_days()%7 +1) ==  6){
                // Day_6 = 0.55 : 71
            if((((panel_1[msg.sender].profit + panel_1[msg.sender].profit_withdrawn)*(now-panel_1[msg.sender].start_time))/(90*(1 days))) > panel_1[msg.sender].profit_withdrawn){  // 45 * 1 days
                local_profit = (((panel_1[msg.sender].profit + panel_1[msg.sender].profit_withdrawn)*(now-panel_1[msg.sender].start_time))/(71*(1 days))) - panel_1[msg.sender].profit_withdrawn; // 20*24*60*60
                return local_profit;
            }else{
                return 0;
            }
        }
        if((panel1_days()%7 +1) ==  7){
                // Day_7 = 0.75 : 96
            if((((panel_1[msg.sender].profit + panel_1[msg.sender].profit_withdrawn)*(now-panel_1[msg.sender].start_time))/(90*(1 days))) > panel_1[msg.sender].profit_withdrawn){  // 45 * 1 days
                local_profit = (((panel_1[msg.sender].profit + panel_1[msg.sender].profit_withdrawn)*(now-panel_1[msg.sender].start_time))/(96*(1 days))) - panel_1[msg.sender].profit_withdrawn; // 20*24*60*60
                return local_profit;
            }else{
                return 0;
            }
        }

            // if((((panel_1[msg.sender].profit + panel_1[msg.sender].profit_withdrawn)*(now-panel_1[msg.sender].start_time))/(90*(1 days))) > panel_1[msg.sender].profit_withdrawn){  // 45 * 1 days
            //     local_profit = (((panel_1[msg.sender].profit + panel_1[msg.sender].profit_withdrawn)*(now-panel_1[msg.sender].start_time))/(90*(1 days))) - panel_1[msg.sender].profit_withdrawn; // 20*24*60*60
            //     return local_profit;
            // }else{
            //     return 0;
            // }
        }
        if(now > panel_1[msg.sender].exp_time){
            return panel_1[msg.sender].profit;
        }
    }

    function panel1_days() public view returns(uint256){
        if(panel_1[msg.sender].time_started == true){
            return ((now - panel_1[msg.sender].start_time)/(1 days)); // change to 24*60*60   1 days
        }
        else {
            return 0;
        }
    }
    
    function withdraw_profit_panel1(uint256 amount) public payable {
        uint256 current_profit = current_profit_p1();
        require(amount <= current_profit, ' Amount sould be less than profit');
        panel_1[msg.sender].profit_withdrawn = panel_1[msg.sender].profit_withdrawn + amount;
        //neg
        panel_1[msg.sender].profit = panel_1[msg.sender].profit - amount;
        token.transfer(msg.sender, (amount - ((5*amount)/100)));
        token.transfer(a, ((5*amount)/100));
    }

    function is_valid_time_p1() public view returns(bool){
        if(panel_1[msg.sender].time_started == true){
        return (now > l_l1())&&(now < u_l1());    
        }
        else {
            return true;
        }
    }

    function l_l1() public view returns(uint256){
        if(panel_1[msg.sender].time_started == true){
            return (1 days)*panel1_days() + panel_1[msg.sender].start_time;     // 24*60*60 1 days
        }else{
            return now;
        }
        
    }
    function u_l1() public view returns(uint256){
        if(panel_1[msg.sender].time_started == true){
            return ((1 days)*panel1_days() + panel_1[msg.sender].start_time + 10 hours);    // 1 days  , 8 hours
        }else {
            return now + (10 hours);  // 8*60*60  8 hours
        }
    }

    function reset_panel_1() private{
        panel_1[msg.sender].remaining_inv_prof = panel_1[msg.sender].profit + panel_1[msg.sender].invested_amount;

        panel_1[msg.sender].invested_amount = 0;
        panel_1[msg.sender].profit = 0;
        panel_1[msg.sender].profit_withdrawn = 0;
        panel_1[msg.sender].start_time = 0;
        panel_1[msg.sender].exp_time = 0;
        panel_1[msg.sender].time_started = false;
    }  

    function withdraw_all_p1() public payable{

        token.transfer(msg.sender, panel_1[msg.sender].remaining_inv_prof);
        panel_1[msg.sender].remaining_inv_prof = 0;

    }


    




 //------------------- Referal System ------------------------

    function refer(address ref_add) public {
        require(user_info[msg.sender].referred == false, ' Already referred ');
        require(ref_add != msg.sender, ' You cannot refer yourself ');
        
        user_info[msg.sender].referred_by = ref_add;
        user_info[msg.sender].referred = true;        
        
        address level1 = user_info[msg.sender].referred_by;
        
        if( (level1 != msg.sender) && (level1 != address(0)) ){
            refer_info[level1].level_1 += 1;
        }   
    }
    

    function referral_system(uint256 amount) private {
        address level1 = user_info[msg.sender].referred_by;

        if( (level1 != msg.sender) && (level1 != address(0)) ){
            user_info[level1].referal_profit += (amount*7)/(100);
        }

    }

    function referal_withdraw() public {    
        uint256 pending = user_info[msg.sender].referal_profit;
        user_info[msg.sender].referal_profit = 0;
        
        token.transfer(msg.sender, pending);
    }  



}

 
